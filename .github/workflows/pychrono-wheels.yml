name: build-pychrono-wheels-cp311

on:
  workflow_dispatch:
  push:
    tags:
      - "pychrono-*"

permissions:
  contents: write

env:
  PY_VER: "3.11"
  CHRONO_REF: "main"   # or a Chrono release tag like "9.0.1"

jobs:
  # ------------------ Windows + macOS (native runners) ------------------
  build_desktop:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            triplet: win
          - os: macos-13
            triplet: macos-x86_64
          - os: macos-14
            triplet: macos-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Chrono
        uses: actions/checkout@v4
        with:
          repository: projectchrono/chrono
          ref: ${{ env.CHRONO_REF }}

      - name: Set up Python ${{ env.PY_VER }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}

      # ---------- Deps: Windows ----------
      - name: Install deps (Windows)
        if: ${{ matrix.triplet == 'win' }}
        shell: pwsh
        run: |
          choco install cmake --installargs '"ADD_CMAKE_TO_PATH=System"' -y --no-progress
          choco install swig --version=4.1.1 -y --no-progress
          python -m pip install --upgrade pip
          python -m pip install "setuptools>=68" wheel "scikit-build-core>=0.9" ninja numpy
          # Eigen (header-only)
          $zip = "eigen-3.4.0.zip"
          Invoke-WebRequest -Uri "https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.zip" -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath .
          $eigenDir = Get-ChildItem -Directory | Where-Object { $_.Name -like "eigen-3.4.0*" } | Select-Object -First 1
          if (-not $eigenDir) { Write-Error "Eigen folder not found"; exit 1 }
          "Eigen3_ROOT=$($eigenDir.FullName)"       | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "EIGEN3_INCLUDE_DIR=$($eigenDir.FullName)"| Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: MSVC Dev Cmd (x64)
        if: ${{ matrix.triplet == 'win' }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # ---------- Deps: macOS ----------
      - name: Install deps (macOS)
        if: ${{ startsWith(matrix.triplet, 'macos') }}
        shell: bash
        run: |
          brew update
          brew install cmake eigen ninja
          python -m pip install --upgrade pip
          python -m pip install "setuptools>=68" wheel "scikit-build-core>=0.9" ninja numpy delocate
          # Build SWIG 4.1.1 (avoid 4.3 issues for Chrono bindings)
          curl -L -o swig-4.1.1.tar.gz https://downloads.sourceforge.net/project/swig/swig/swig-4.1.1/swig-4.1.1.tar.gz
          tar xzf swig-4.1.1.tar.gz
          cd swig-4.1.1 && ./configure && make -j2 && sudo make install && cd ..
          swig -version

      # ---------- Configure ----------
      - name: Configure (Windows)
        if: ${{ matrix.triplet == 'win' }}
        shell: pwsh
        run: |
          $PYEXE = (python -c "import sys; print(sys.executable)")
          cmake -S . -B build -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_CXX_STANDARD=17 `
            -DCMAKE_VERBOSE_MAKEFILE=ON `
            -DCH_ENABLE_MODULE_PYTHON=ON `
            -DCH_ENABLE_VEHICLE=OFF `
            -DCH_ENABLE_IRRLICHT=OFF `
            -DCH_ENABLE_VSG=OFF `
            -DCH_ENABLE_SENSOR=OFF `
            -DCH_ENABLE_POSTPROCESS=OFF `
            -DCH_ENABLE_OPENGL=OFF `
            -DCH_USE_TBB=OFF -DCH_USE_MKL=OFF -DCH_USE_CUDA=OFF `
            -DPython3_EXECUTABLE="$PYEXE" `
            -DEIGEN3_INCLUDE_DIR="${env:EIGEN3_INCLUDE_DIR}" -DEigen3_ROOT="${env:Eigen3_ROOT}"
          cmake --system-information | Select-String "CMAKE_GENERATOR|CMAKE_CXX_COMPILER"

      - name: Configure (macOS)
        if: ${{ startsWith(matrix.triplet, 'macos') }}
        shell: bash
        run: |
          PYEXE=$(python -c "import sys; print(sys.executable)")
          MAC_FLAGS=""
          if [[ "${{ matrix.triplet }}" == "macos-x86_64" ]]; then
            export MACOSX_DEPLOYMENT_TARGET=11
            MAC_FLAGS="-DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=11"
          elif [[ "${{ matrix.triplet }}" == "macos-arm64" ]]; then
            export MACOSX_DEPLOYMENT_TARGET=11
            MAC_FLAGS="-DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_OSX_DEPLOYMENT_TARGET=11"
          fi
          cmake -S . -B build -G "Ninja" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCH_ENABLE_MODULE_PYTHON=ON \
            -DCH_ENABLE_VEHICLE=OFF \
            -DCH_ENABLE_IRRLICHT=OFF \
            -DCH_ENABLE_VSG=OFF \
            -DCH_ENABLE_SENSOR=OFF \
            -DCH_ENABLE_POSTPROCESS=OFF \
            -DCH_ENABLE_OPENGL=OFF \
            -DCH_USE_TBB=OFF -DCH_USE_MKL=OFF -DCH_USE_CUDA=OFF \
            -DPython3_EXECUTABLE="$PYEXE" $MAC_FLAGS

      # ---------- Build ----------
      - name: Build (Windows)
        if: ${{ matrix.triplet == 'win' }}
        shell: pwsh
        run: |
          cmake --build build --config Release --parallel
          if (Test-Path build\CMakeFiles\CMakeError.log) { Write-Host "=== CMakeError.log ==="; Get-Content build\CMakeFiles\CMakeError.log }

      - name: Build (macOS)
        if: ${{ startsWith(matrix.triplet, 'macos') }}
        shell: bash
        run: |
          cmake --build build --config Release --parallel
          if [ -f build/CMakeFiles/CMakeError.log ]; then echo "=== CMakeError.log ==="; cat build/CMakeFiles/CMakeError.log || true; fi

      # ---------- Install ----------
      - name: Install (Windows)
        if: ${{ matrix.triplet == 'win' }}
        shell: pwsh
        run: |
          $prefix = Join-Path $pwd "stage"
          cmake --install build --config Release --prefix "$prefix"
          Write-Host "---- staged files (sample) ----"
          Get-ChildItem -Recurse -File $prefix | Select-Object -First 100 | ForEach-Object { $_.FullName }

      - name: Install (macOS)
        if: ${{ startsWith(matrix.triplet, 'macos') }}
        shell: bash
        run: |
          cmake --install build --config Release --prefix "$PWD/stage"
          echo "---- staged files (sample) ----"
          find "$PWD/stage" -maxdepth 5 -type f | head -n 100 || true

      # ---------- Verify native extension ----------
      - name: Verify pychrono native extension (Windows)
        if: ${{ matrix.triplet == 'win' }}
        shell: pwsh
        run: |
          $dest = (Get-ChildItem -Directory -Recurse -Path "$pwd\stage" -Filter pychrono | Select-Object -First 1).FullName
          if (-not $dest) { Write-Error "pychrono directory not found under stage/"; exit 1 }
          Write-Host "Checking for native extension in: $dest"
          $ext = Get-ChildItem -Recurse -File $dest -Include *.pyd,*.dll | Select-Object -First 1
          if (-not $ext) { Write-Error "ERROR: No native Python extension (.pyd) found in pychrono."; exit 1 }
          Write-Host "Found: $($ext.FullName)"

      - name: Verify pychrono native extension (macOS)
        if: ${{ startsWith(matrix.triplet, 'macos') }}
        shell: bash
        run: |
          DEST="$PWD/stage/share/chrono/python/pychrono"
          if [ ! -d "$DEST" ]; then DEST="$(find "$PWD/stage" -type d -name pychrono -print -quit || true)"; fi
          echo "Checking for native extension in: $DEST"
          EXT_FOUND=$(find "$DEST" -type f \( -name "*.so" -o -name "*.dylib" \) | head -n1)
          if [ -z "$EXT_FOUND" ]; then echo "ERROR: No native Python extension was built in pychrono."; exit 1; fi
          echo "Found: $EXT_FOUND"

      # ---------- Determine pychrono install dir ----------
      - name: Determine pychrono install dir (Windows)
        if: ${{ matrix.triplet == 'win' }}
        id: inst_win
        shell: pwsh
        run: |
          $dest = (Get-ChildItem -Directory -Recurse -Path "$pwd\stage" -Filter pychrono | Select-Object -First 1).FullName
          if (-not $dest) { Write-Error "pychrono not found under stage/"; exit 1 }
          "pychrono_dir=$dest" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "PYCHRONO_DIR: $dest"

      - name: Determine pychrono install dir (macOS)
        if: ${{ startsWith(matrix.triplet, 'macos') }}
        id: inst_macos
        shell: bash
        run: |
          set -euo pipefail
          DEST="$PWD/stage/share/chrono/python/pychrono"
          if [ ! -d "$DEST" ]; then DEST="$(find "$PWD/stage" -type d -name pychrono -print -quit || true)"; fi
          if [ -z "$DEST" ]; then echo "ERROR: pychrono not found under stage/"; exit 1; fi
          echo "pychrono_dir=$DEST" >> "$GITHUB_OUTPUT"
          echo "PYCHRONO_DIR: $DEST"

      # ---------- Package as a wheel ----------
      - name: Create packaging skeleton (Windows)
        if: ${{ matrix.triplet == 'win' }}
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force pkg, wheelhouse -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Force -Path pkg\pychrono | Out-Null
          New-Item -ItemType Directory -Force -Path wheelhouse | Out-Null
          Copy-Item -Recurse -Force "${{ steps.inst_win.outputs.pychrono_dir }}\*" "pkg\pychrono\"
          # pyproject.toml
          @"
[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pychrono"
version = "0.0.0+local"
description = "PyChrono binary wheel (built from Project Chrono)"
requires-python = ">=3.11,<3.12"
"@ | Set-Content -Encoding UTF8 pkg\pyproject.toml
          # setup.py with package_data for binaries
          @"
from setuptools import setup
from setuptools.dist import Distribution

class BinDist(Distribution):
    def has_ext_modules(self):
        return True

setup(
    name="pychrono",
    version="0.0.0+local",
    packages=["pychrono"],
    package_dir={"pychrono": "pychrono"},
    include_package_data=True,
    package_data={"pychrono": ["**/*.pyd","**/*.dll","**/*.so","**/*.dylib","**/*.dat","**/*.txt"]},
    distclass=BinDist,
)
"@ | Set-Content -Encoding UTF8 pkg\setup.py
          python -m pip install --upgrade build wheel
          python -m build -w pkg

      - name: Create packaging skeleton (macOS)
        if: ${{ startsWith(matrix.triplet, 'macos') }}
        shell: bash
        run: |
          set -euo pipefail
          rm -rf pkg wheelhouse
          mkdir -p pkg/pychrono wheelhouse
          cp -R "${{ steps.inst_macos.outputs.pychrono_dir }}/." pkg/pychrono/
          printf '%s\n' \
            '[build-system]' \
            'requires = ["setuptools>=68", "wheel"]' \
            'build-backend = "setuptools.build_meta"' \
            '' \
            '[project]' \
            'name = "pychrono"' \
            'version = "0.0.0+local"' \
            'description = "PyChrono binary wheel (built from Project Chrono)"' \
            'requires-python = ">=3.11,<3.12"' \
            > pkg/pyproject.toml
          printf '%s\n' \
            'from setuptools import setup' \
            'from setuptools.dist import Distribution' \
            '' \
            'class BinDist(Distribution):' \
            '    def has_ext_modules(self):' \
            '        return True' \
            '' \
            'setup(' \
            '    name="pychrono",' \
            '    version="0.0.0+local",' \
            '    packages=["pychrono"],' \
            '    package_dir={"pychrono": "pychrono"},' \
            '    include_package_data=True,' \
            '    package_data={"pychrono": ["**/*.so","**/*.dylib","**/*.dat","**/*.txt"]},' \
            '    distclass=BinDist,' \
            ')' \
            > pkg/setup.py
          python -m pip install --upgrade build wheel
          python -m build -w pkg

      # ---------- Fix wheels per-OS ----------
      - name: Repair Windows wheel with delvewheel
        if: ${{ matrix.triplet == 'win' }}
        shell: pwsh
        run: |
          python -m pip install --upgrade delvewheel
          $addPaths = "$pwd\stage\bin;$pwd\stage\lib"
          python -m delvewheel show pkg\dist\*.whl
          python -m delvewheel repair --add-path "$addPaths" --wheel-dir wheelhouse pkg\dist\*.whl
          Get-ChildItem wheelhouse\*.whl | ForEach-Object { Write-Host "Wheel:" $_.FullName "Size:" $_.Length "bytes" }
          # Inspect contents via a small script (PowerShell-safe)
          @"
import glob, zipfile
wheels = sorted(glob.glob('wheelhouse/*.whl'))
print('Wheels:', wheels)
if wheels:
    w = wheels[-1]
    print('== Contents of', w, '==')
    with zipfile.ZipFile(w) as z:
        for n in z.namelist():
            if n.endswith(('.pyd','.dll')) or 'delvewheel' in n:
                print('  ', n)
"@ | Set-Content -Encoding UTF8 inspect_wheel.py
          python inspect_wheel.py

      - name: Delocate (macOS)
        if: ${{ startsWith(matrix.triplet, 'macos') }}
        shell: bash
        run: |
          set -e
          mkdir -p wheelhouse
          LIB_ARGS=""
          while IFS= read -r d; do LIB_ARGS="$LIB_ARGS -L $d"; done < <(find "$PWD/stage" -type f -name "*.dylib" -exec dirname {} \; | sort -u)
          delocate-listdeps pkg/dist/*.whl || true
          if eval "delocate-wheel -v -w wheelhouse $LIB_ARGS pkg/dist/*.whl"; then
            echo "Delocate success."
          else
            echo "Delocate failed; copying original wheel."
            cp pkg/dist/*.whl wheelhouse/
          fi
          ls -al wheelhouse

      - name: Upload per-OS artifact
        uses: actions/upload-artifact@v4
        with:
          name: pychrono-wheel-cp311-${{ matrix.triplet }}
          path: wheelhouse/*.whl
          if-no-files-found: error

  # ------------------ Linux manylinux2014 (proper manylinux tag) ------------------
  build_linux_manylinux:
    name: Build (Linux manylinux2014 cp311)
    runs-on: ubuntu-22.04
    container: quay.io/pypa/manylinux2014_x86_64
    continue-on-error: true
    steps:
      - name: Bootstrap tools required by checkout (inside CentOS7 container)
        shell: bash
        run: |
          yum -y install git tar gzip ca-certificates
          update-ca-trust
          git --version
          tar --version

      # Node16 actions in CentOS7 container
      - name: Checkout Chrono
        uses: actions/checkout@v3
        with:
          repository: projectchrono/chrono
          ref: ${{ env.CHRONO_REF }}

      - name: Allow git safe.directory (defensive)
        shell: bash
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Prepare toolchain & Python 3.11
        shell: bash
        run: |
          export PY="/opt/python/cp311-cp311/bin/python"
          export PATH="/opt/python/cp311-cp311/bin:$PATH"
          $PY -m pip install --upgrade pip
          $PY -m pip install "setuptools>=68" wheel build numpy cmake ninja auditwheel
          yum -y install make gcc gcc-c++ pcre2-devel
          curl -L -o swig-4.1.1.tar.gz https://downloads.sourceforge.net/project/swig/swig/swig-4.1.1/swig-4.1.1.tar.gz
          tar xzf swig-4.1.1.tar.gz
          cd swig-4.1.1 && ./configure && make -j2 && make install && cd ..
          swig -version
          curl -L -o eigen-3.4.0.tar.gz https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.gz
          tar xzf eigen-3.4.0.tar.gz
          export EIGEN_DIR="$PWD/eigen-3.4.0"

      - name: Configure & build Chrono (Python module)
        shell: bash
        run: |
          export PY="/opt/python/cp311-cp311/bin/python"
          export PATH="/opt/python/cp311-cp311/bin:$PATH"
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCH_ENABLE_MODULE_PYTHON=ON \
            -DCH_ENABLE_VEHICLE=OFF \
            -DCH_ENABLE_IRRLICHT=OFF \
            -DCH_ENABLE_VSG=OFF \
            -DCH_ENABLE_SENSOR=OFF \
            -DCH_ENABLE_POSTPROCESS=OFF \
            -DCH_ENABLE_OPENGL=OFF \
            -DCH_USE_TBB=OFF -DCH_USE_MKL=OFF -DCH_USE_CUDA=OFF \
            -DPython3_EXECUTABLE="$PY" \
            -DEIGEN3_INCLUDE_DIR="$EIGEN_DIR" -DEigen3_ROOT="$EIGEN_DIR"
          cmake --build build --config Release --parallel
          cmake --install build --config Release --prefix "$PWD/stage"
          echo "---- staged (sample) ----"
          find "$PWD/stage" -maxdepth 5 -type f | head -n 100 || true

      - name: Verify pychrono native extension built
        shell: bash
        run: |
          DEST="$PWD/stage/share/chrono/python/pychrono"
          if [ ! -d "$DEST" ]; then DEST="$(find "$PWD/stage" -type d -name pychrono -print -quit || true)"; fi
          echo "Checking for native extension in: $DEST"
          EXT_FOUND=$(find "$DEST" -type f -name "*.so" | head -n1)
          if [ -z "$EXT_FOUND" ]; then echo "ERROR: No native Python extension was built in pychrono."; exit 1; fi
          echo "Found: $EXT_FOUND"

      - name: Package, build wheel, repair → manylinux_2_17
        shell: bash
        run: |
          set -euo pipefail
          DEST="$PWD/stage/share/chrono/python/pychrono"
          if [ ! -d "$DEST" ]; then DEST=$(find "$PWD/stage" -type d -name pychrono -print -quit || true); fi
          if [ -z "$DEST" ]; then echo "ERROR: pychrono not found under stage/"; exit 1; fi
          rm -rf pkg wheelhouse && mkdir -p pkg/pychrono wheelhouse
          cp -R "$DEST/." pkg/pychrono/
          printf '%s\n' \
            '[build-system]' \
            'requires = ["setuptools>=68", "wheel"]' \
            'build-backend = "setuptools.build_meta"' \
            '' \
            '[project]' \
            'name = "pychrono"' \
            'version = "0.0.0+local"' \
            'description = "PyChrono binary wheel (built from Project Chrono)"' \
            'requires-python = ">=3.11,<3.12"' \
            > pkg/pyproject.toml
          printf '%s\n' \
            'from setuptools import setup' \
            'from setuptools.dist import Distribution' \
            '' \
            'class BinDist(Distribution):' \
            '    def has_ext_modules(self):' \
            '        return True' \
            '' \
            'setup(' \
            '    name="pychrono",' \
            '    version="0.0.0+local",' \
            '    packages=["pychrono"],' \
            '    package_dir={"pychrono": "pychrono"},' \
            '    include_package_data=True,' \
            '    package_data={"pychrono": ["**/*.so","**/*.dat","**/*.txt"]},' \
            '    distclass=BinDist,' \
            ')' \
            > pkg/setup.py
          /opt/python/cp311-cp311/bin/python -m build -w pkg
          mkdir -p wheelhouse
          auditwheel show pkg/dist/*.whl || true
          auditwheel repair pkg/dist/*.whl -w wheelhouse
          ls -al wheelhouse

      - name: Upload per-OS artifact (linux)
        uses: actions/upload-artifact@v3  # Node16 for CentOS7 container
        with:
          name: pychrono-wheel-cp311-linux
          path: wheelhouse/*.whl
          if-no-files-found: error

  # ------------------ Collect & Release ------------------
  collect:
    name: Collect wheels
    needs: [build_desktop, build_linux_manylinux]
    if: ${{ always() }}
    runs-on: ubuntu-22.04
    outputs:
      has_wheels: ${{ steps.check.outputs.has_wheels }}
    steps:
      - name: Prepare dir
        run: mkdir -p wheelhouse

      - name: Download win wheels
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: pychrono-wheel-cp311-win
          path: wheelhouse

      - name: Download macOS x86_64 wheels
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: pychrono-wheel-cp311-macos-x86_64
          path: wheelhouse

      - name: Download macOS arm64 wheels
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: pychrono-wheel-cp311-macos-arm64
          path: wheelhouse

      - name: Download linux wheels
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: pychrono-wheel-cp311-linux
          path: wheelhouse

      - name: List collected wheels
        run: |
          echo "Collected:"
          ls -al wheelhouse || true
          ls -1 wheelhouse/*.whl 2>/dev/null || true

      - name: Check if any wheels exist
        id: check
        shell: bash
        run: |
          count=$(ls -1 wheelhouse/*.whl 2>/dev/null | wc -l || true)
          if [ "${count}" -gt 0 ]; then
            echo "has_wheels=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_wheels=false" >> "$GITHUB_OUTPUT"
          fi
          echo "Wheel count: ${count}"

      - name: Upload combined artifact
        if: ${{ steps.check.outputs.has_wheels == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: pychrono-wheels-cp311
          path: wheelhouse/*.whl

  release:
    name: Release wheels
    needs: collect
    if: ${{ startsWith(github.ref, 'refs/tags/pychrono-') && needs.collect.outputs.has_wheels == 'true' }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: pychrono-wheels-cp311
          path: wheelhouse
      - uses: softprops/action-gh-release@v2
        with:
          files: wheelhouse/*.whl
          generate_release_notes: true
