name: build-pychrono-wheels-cp311

on:
  workflow_dispatch:
  push:
    tags:
      - "pychrono-*"

permissions:
  contents: write

env:
  PY_VER: "3.11"      # Blender 4.2/4.3
  CHRONO_REF: "main"  # or a release tag like "9.0.1"

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-2022
            triplet: win
          - os: ubuntu-22.04
            triplet: linux
          - os: macos-13
            triplet: macos-x86_64
          - os: macos-14
            triplet: macos-arm64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Chrono
        uses: actions/checkout@v4
        with:
          repository: projectchrono/chrono
          ref: ${{ env.CHRONO_REF }}

      - name: Set up Python ${{ env.PY_VER }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}

      # ---------- OS-specific deps ----------
      - name: Install deps (Windows)
        if: ${{ matrix.triplet == 'win' }}
        shell: bash
        run: |
          choco install cmake --installargs '"ADD_CMAKE_TO_PATH=System"' -y
          choco install swig --version=4.1.1 -y
          python -m pip install --upgrade pip
          python -m pip install "setuptools>=68" wheel "scikit-build-core>=0.9" ninja numpy

      - name: Install deps (Linux)
        if: ${{ matrix.triplet == 'linux' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y swig libeigen3-dev ninja-build patchelf
          python -m pip install --upgrade pip
          python -m pip install "setuptools>=68" wheel "scikit-build-core>=0.9" ninja numpy auditwheel

      - name: Install deps (macOS)
        if: ${{ startsWith(matrix.triplet, 'macos') }}
        shell: bash
        run: |
          brew update
          brew install cmake eigen ninja
          python -m pip install --upgrade pip
          python -m pip install "setuptools>=68" wheel "scikit-build-core>=0.9" ninja numpy delocate
          # Build SWIG 4.1.1 (avoid 4.3 issues for Chrono bindings)
          curl -L -o swig-4.1.1.tar.gz https://downloads.sourceforge.net/project/swig/swig/swig-4.1.1/swig-4.1.1.tar.gz
          tar xzf swig-4.1.1.tar.gz
          cd swig-4.1.1
          ./configure
          make -j2
          sudo make install
          cd ..
          swig -version

      # ---------- Configure / Build ----------
      - name: Configure (CMake, Python module only)
        shell: bash
        run: |
          PYEXE=$(python -c "import sys; print(sys.executable)")
          cmake -S . -B build -G "Ninja" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCH_ENABLE_MODULE_PYTHON=ON \
            -DCH_ENABLE_VEHICLE=OFF \
            -DCH_ENABLE_IRRLICHT=OFF \
            -DCH_ENABLE_VSG=OFF \
            -DCH_ENABLE_SENSOR=OFF \
            -DCH_ENABLE_POSTPROCESS=OFF \
            -DCH_ENABLE_OPENGL=OFF \
            -DCH_USE_TBB=OFF -DCH_USE_MKL=OFF -DCH_USE_CUDA=OFF \
            -DPython3_EXECUTABLE="$PYEXE"

      - name: Show CMake Python vars (diagnostics)
        shell: bash
        run: |
          cmake -L -N build | sed -n '1,200p' | grep -Ei 'python|py3' || true

      - name: Build
        run: cmake --build build --config Release --parallel

      - name: Install to staging prefix
        shell: bash
        run: |
          cmake --install build --config Release --prefix "$PWD/stage"
          echo "---- sample of staged files ----"
          find "$PWD/stage" -maxdepth 6 -type f | head -n 200 || true

      # ---------- Locate staged site-packages (robust) ----------
      - name: Locate staged site-packages
        id: sp
        shell: bash
        run: |
          set -euo pipefail
          # 1) Preferred: look for .../site-packages/pychrono
          PKG_PATH=$(find "$PWD/stage" -type d -path "*/site-packages/pychrono" -print -quit || true)
          # 2) Debian-style: .../dist-packages/pychrono
          if [ -z "$PKG_PATH" ]; then
            PKG_PATH=$(find "$PWD/stage" -type d -path "*/dist-packages/pychrono" -print -quit || true)
          fi
          # 3) Fallback: any 'pychrono' under stage
          if [ -z "$PKG_PATH" ]; then
            PKG_PATH=$(find "$PWD/stage" -type d -name "pychrono" -print -quit || true)
          fi
          # 4) Absolute last resort: check build tree
          if [ -z "$PKG_PATH" ]; then
            PKG_PATH=$(find "$PWD/build" -type d -name "pychrono" -print -quit || true)
          fi

          if [ -z "$PKG_PATH" ] || [ ! -f "$PKG_PATH/__init__.py" ]; then
            echo "ERROR: Could not locate installed pychrono package." >&2
            echo "-- staged tree --"
            find "$PWD/stage" -maxdepth 6 -print | head -n 300 || true
            echo "-- build tree (hint) --"
            find "$PWD/build" -maxdepth 6 -print | head -n 300 || true
            exit 1
          fi

          SITEPKG="$(dirname "$PKG_PATH")"
          echo "Detected pychrono at: $PKG_PATH"
          echo "SITEPACKAGES resolved to: $SITEPKG"
          echo "path=$SITEPKG" >> "$GITHUB_OUTPUT"

      # ---------- Package as a wheel ----------
      - name: Create packaging skeleton
        shell: bash
        run: |
          set -euo pipefail
          rm -rf pkg wheelhouse
          mkdir -p pkg/pychrono wheelhouse

          # Copy staged pychrono into packaging src
          mkdir -p pkg/pychrono
          cp -R "${{ steps.sp.outputs.path }}/pychrono/." pkg/pychrono/

          # Write pyproject.toml (no heredocs)
          printf '%s\n' \
            '[build-system]' \
            'requires = ["setuptools>=68", "wheel"]' \
            'build-backend = "setuptools.build_meta"' \
            '' \
            '[project]' \
            'name = "pychrono"' \
            'version = "0.0.0+local"' \
            'description = "PyChrono binary wheel (built from Project Chrono)"' \
            'requires-python = ">=3.11,<3.12"' \
            > pkg/pyproject.toml

          # Write setup.py (no heredocs)
          printf '%s\n' \
            'from setuptools import setup' \
            'from setuptools.dist import Distribution' \
            '' \
            'class BinDist(Distribution):' \
            '    def has_ext_modules(self):' \
            '        return True  # mark wheel as binary -> platform tag' \
            '' \
            'setup(' \
            '    name="pychrono",' \
            '    version="0.0.0+local",' \
            '    packages=["pychrono"],' \
            '    package_dir={"pychrono": "pychrono"},' \
            '    include_package_data=True,' \
            '    distclass=BinDist,' \
            ')' \
            > pkg/setup.py

          python -m pip install --upgrade build wheel
          python -m build -w pkg

      - name: Repair wheel (Linux manylinux)
        if: ${{ matrix.triplet == 'linux' }}
        shell: bash
        run: |
          ls -al pkg/dist
          auditwheel show pkg/dist/*.whl || true
          auditwheel repair pkg/dist/*.whl -w wheelhouse
          ls -al wheelhouse

      - name: Repair wheel (macOS delocate)
        if: ${{ startsWith(matrix.triplet, 'macos') }}
        shell: bash
        run: |
          ls -al pkg/dist
          delocate-listdeps pkg/dist/*.whl || true
          delocate-wheel -w wheelhouse pkg/dist/*.whl
          ls -al wheelhouse

      - name: Move wheel (Windows)
        if: ${{ matrix.triplet == 'win' }}
        shell: bash
        run: |
          mkdir -p wheelhouse
          cp pkg/dist/*.whl wheelhouse/

      - name: Upload per-OS wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: pychrono-wheel-cp311-${{ matrix.triplet }}
          path: wheelhouse/*.whl
          if-no-files-found: error

  collect:
    name: Collect wheels
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pychrono-wheel-cp311-*
          merge-multiple: true
          path: wheelhouse
      - name: List final wheels
        run: ls -al wheelhouse
      - name: Upload combined wheels
        uses: actions/upload-artifact@v4
        with:
          name: pychrono-wheels-cp311
          path: wheelhouse/*.whl

  release:
    name: Release wheels
    needs: collect
    if: startsWith(github.ref, 'refs/tags/pychrono-')
    runs-on: ubuntu-22.04
    steps:
      - name: Download combined wheels
        uses: actions/download-artifact@v4
        with:
          name: pychrono-wheels-cp311
          path: wheelhouse
      - name: Create GitHub Release & upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: wheelhouse/*.whl
          generate_release_notes: true
