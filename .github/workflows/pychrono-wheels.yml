name: build-pychrono-wheels-cp311

on:
  workflow_dispatch:
  push:
    tags:
      - "pychrono-*"

permissions:
  contents: write  # needed for release upload

env:
  PY_VER: "3.11"
  CHRONO_REF: "main"   # or a Chrono release tag like "9.0.1"

jobs:
  # ------------------ Windows + macOS (native runners) ------------------
  build_desktop:
    strategy:
      matrix:
        include:
          - os: windows-2022
            triplet: win
          - os: macos-13
            triplet: macos-x86_64
          - os: macos-14
            triplet: macos-arm64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Chrono
        uses: actions/checkout@v4
        with:
          repository: projectchrono/chrono
          ref: ${{ env.CHRONO_REF }}

      - name: Set up Python ${{ env.PY_VER }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VER }}

      # ---------- Deps: Windows ----------
      - name: Install deps (Windows)
        if: ${{ matrix.triplet == 'win' }}
        shell: pwsh
        run: |
          choco install cmake --installargs '"ADD_CMAKE_TO_PATH=System"' -y --no-progress
          choco install swig --version=4.1.1 -y --no-progress
          python -m pip install --upgrade pip
          python -m pip install "setuptools>=68" wheel "scikit-build-core>=0.9" ninja numpy
          # Eigen (header-only)
          $zip = "eigen-3.4.0.zip"
          Invoke-WebRequest -Uri "https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.zip" -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath .
          $eigenDir = Get-ChildItem -Directory | Where-Object { $_.Name -like "eigen-3.4.0*" } | Select-Object -First 1
          if (-not $eigenDir) { Write-Error "Eigen folder not found"; exit 1 }
          "Eigen3_ROOT=$($eigenDir.FullName)"       | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "EIGEN3_INCLUDE_DIR=$($eigenDir.FullName)"| Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # ---------- Deps: macOS ----------
      - name: Install deps (macOS)
        if: ${{ startsWith(matrix.triplet, 'macos') }}
        shell: bash
        run: |
          brew update
          brew install cmake eigen ninja
          python -m pip install --upgrade pip
          python -m pip install "setuptools>=68" wheel "scikit-build-core>=0.9" ninja numpy delocate
          # Build SWIG 4.1.1 (avoid 4.3 issues for Chrono bindings)
          curl -L -o swig-4.1.1.tar.gz https://downloads.sourceforge.net/project/swig/swig/swig-4.1.1/swig-4.1.1.tar.gz
          tar xzf swig-4.1.1.tar.gz
          cd swig-4.1.1 && ./configure && make -j2 && sudo make install && cd ..
          swig -version

      # ---------- Configure / Build ----------
      - name: Configure (CMake, Python module only)
        shell: bash
        run: |
          PYEXE=$(python -c "import sys; print(sys.executable)")

          # Mac-specific arch & deployment target for correct wheel tags
          MAC_FLAGS=""
          if [[ "${{ matrix.triplet }}" == "macos-x86_64" ]]; then
            export MACOSX_DEPLOYMENT_TARGET=11
            MAC_FLAGS="-DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=11"
          elif [[ "${{ matrix.triplet }}" == "macos-arm64" ]]; then
            export MACOSX_DEPLOYMENT_TARGET=11
            MAC_FLAGS="-DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_OSX_DEPLOYMENT_TARGET=11"
          fi

          # Windows: Eigen hints + inject system libs (winsock + winmm)
          if [[ "${{ matrix.triplet }}" == "win" ]]; then
            EIGEN_FLAGS="-DEIGEN3_INCLUDE_DIR=${EIGEN3_INCLUDE_DIR} -DEigen3_ROOT=${Eigen3_ROOT}"
            # These flags add ws2_32.lib + Winmm.lib to ALL link steps (exe/shared/module)
            WIN_LINK_FLAGS='-DCMAKE_EXE_LINKER_FLAGS="/DEFAULTLIB:ws2_32.lib /DEFAULTLIB:Winmm.lib" -DCMAKE_SHARED_LINKER_FLAGS="/DEFAULTLIB:ws2_32.lib /DEFAULTLIB:Winmm.lib" -DCMAKE_MODULE_LINKER_FLAGS="/DEFAULTLIB:ws2_32.lib /DEFAULTLIB:Winmm.lib"'
          else
            EIGEN_FLAGS=""
            WIN_LINK_FLAGS=""
          fi

          cmake -S . -B build -G "Ninja" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCH_ENABLE_MODULE_PYTHON=ON \
            -DCH_ENABLE_VEHICLE=OFF \
            -DCH_ENABLE_IRRLICHT=OFF \
            -DCH_ENABLE_VSG=OFF \
            -DCH_ENABLE_SENSOR=OFF \
            -DCH_ENABLE_POSTPROCESS=OFF \
            -DCH_ENABLE_OPENGL=OFF \
            -DCH_USE_TBB=OFF -DCH_USE_MKL=OFF -DCH_USE_CUDA=OFF \
            -DPython3_EXECUTABLE="$PYEXE" $EIGEN_FLAGS $WIN_LINK_FLAGS $MAC_FLAGS

      - name: Build
        run: cmake --build build --config Release --parallel

      ... # [rest of workflow unchanged, as in your supplied script]
